
@inproceedings{garcia_snap_2022,
	address = {New York, NY, USA},
	series = {{SIGCSE} 2022},
	title = {Snap! 7 - {Microworlds}, {Scenes}, and {Extensions}!},
	copyright = {All rights reserved},
	isbn = {978-1-4503-9071-2},
	url = {https://doi.org/10.1145/3478432.3499266},
	doi = {10.1145/3478432.3499266},
	abstract = {Snap! version 7 introduces three big new features: microworlds, scenes, and extensions. Microworlds allow curriculum designers to hide blocks for novice users, allowing them to focus only on the blocks they need. This is similar to Parson's Problems, in which students rearrange commands to solve a challenge. The new version makes it easy for curriculum developers to design these microworlds; we think this can be truly transformative for younger learners. Scenes provide the ability for a single project to have different resources (sprites, sounds, costumes) that would normally have been cluttered in the same "namespace", but now can be nicely organized into different scenes. The last addition may be the most exciting - extensions allow the many Snap! forks now to be brought back in under the primary Snap! umbrella. To make that work, we have exposed low-level JavaScript functionality, and extensions can make use of those functions to adjust the look and feel of Snap! in many ways, provide different tabs or default blocks, and more. Finally, we would like to present some new ways that our teachers say they are using Hyperblocks (vector operations), introduced last year with Snap! 6. Overall, this new release represents more than 18 months of hard work by a dedicated team, and we would be delighted to share these new features with our SIGCSE family.},
	booktitle = {Proceedings of the 53rd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} {V}. 2},
	publisher = {Association for Computing Machinery},
	author = {Garcia, Dan and Ball, Michael and Garcia, Yuan},
	year = {2022},
	note = {event-place: Providence, RI, USA},
	keywords = {blocks-based programming, microworlds, scratch, snap!},
	pages = {1179},
}

@inproceedings{walther_new_2022,
	address = {New York, NY, USA},
	series = {{SIGCSE} 2022},
	title = {A {New} {Class} of {Teaching}-{Track} {Faculty}: {No} {Ph}.{D}. {Required}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-9071-2},
	url = {https://doi.org/10.1145/3478432.3499227},
	doi = {10.1145/3478432.3499227},
	abstract = {Demand for computer science teaching faculty is skyrocketing. In response, many colleges and universities are beginning to advertise for and hire teaching candidates without a PhD. In this panel, we discuss our experiences as faculty in this position and explore how we can promote and support the important contributions that non-PhD faculty have on students. Throughout this interactive panel, we will engage in-person and virtual participants from all levels of higher education to discuss the experiences surrounding teaching track faculty without a PhD. Additionally we will reflect and envision how our community can systematically support and create alternative paths within academia that will allow potential faculty to earn a terminal Master's degree and learn how to be effective teachers at the same time.},
	booktitle = {Proceedings of the 53rd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} {V}. 2},
	publisher = {Association for Computing Machinery},
	author = {Walther, Kendra and Blank, Adam and Ball, Michael and Rampure, Suraj},
	year = {2022},
	note = {event-place: Providence, RI, USA},
	keywords = {academia, computer science education, teaching, teaching track faculty},
	pages = {1029--1030},
}

@inproceedings{ball_beauty_2022,
	address = {New York, NY, USA},
	series = {{SIGCSE} 2022},
	title = {Beauty and {Joy} of {Computing}: {AP} {CS} {Principles} \&amp; {Middle} {School} {Curriculum}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-9071-2},
	url = {https://doi.org/10.1145/3478432.3499145},
	doi = {10.1145/3478432.3499145},
	abstract = {The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course created at UC Berkeley to reach high school and university nonmajors in computer science. It was chosen for the CSP pilot and endorsed by the College Board as an AP CSP curriculum and PD provider since the first AP CSP exam sitting in 2017. This past year, BJC developed a new course for middle school and early high school that teaches a functional approach to programming, emphasizing iteration and commands, and including exciting projects in graphics, data, and media. In this workshop, we will provide an overview of the BJC middle school and high school curriculum including course materials, teacher resources, and an introduction to Snap!, the chosen visual programming language of BJC. We will not only cover curriculum updates, Snap! updates, BJC for middle school, BJC in other languages, but also dive into labs with hands-on programming. Laptop is required.},
	booktitle = {Proceedings of the 53rd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education} {V}. 2},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and Mock, Lauren and Garcia, Dan and Barnes, Tiffany and Hill, Marnie and Fries, Mary and Fox, Pamela and Garcia, Yuan},
	year = {2022},
	note = {event-place: Providence, RI, USA},
	keywords = {advanced placement, blocks-based programming, broadening participation, computer science principles, cs0, high school, middle school, non-majors},
	pages = {1195},
}

@inproceedings{kassil_active_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {Active {Academic} {Integrity}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3439674},
	doi = {10.1145/3408877.3439674},
	abstract = {Even in an introduction to computer science course, students commit academic misconduct. Traditional plagiarism detection software like MOSS fail to give great results for assignments whose solutions are only a few lines long. We change program variable names and then search student code for those variable names. If their code backups contain the variable names, they are flagged for cheating. Our tool was used in a CS1 course that had a Spring 2020 enrollment of 1800 students. We accused 164 students for the first homework, and enforced 142 penalties (86.6\% of accused students) for the first homework. Over the semester we had 452 enforced cases of cheating on homeworks, labs, and projects out of 598 accusations (75.6\% of accused students). In Summer 2020 we improved the tool to speed up response time and reduce false positive rate from 24.4\% to 21.9\%. We built open source software using Python that searches students' code for suspicious keywords and uploads it all to a spreadsheet. We also asked students to provide their past work at the beginning of the semester. This is important because it reduces student stress and reduces false positives. Our work helps the remedial nature of communicating to students they have been flagged for cheating by having the students know that someone is monitoring their work. Students are caught breaking the rules before they develop bad habits that hinder their learning and lead to persistent cheating.},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Kassil, Alex and Ball, Michael},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {academic integrity, cheating, plagiarism detection, undergraduate courses},
	pages = {1284},
}

@inproceedings{garcia_snap6_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {Snap!6, {Introducing} {Hyperblocks}!},
	copyright = {All rights reserved},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3439545},
	doi = {10.1145/3408877.3439545},
	abstract = {In early July we released Snap! version 6, with many cool new features, including a ground-up rewrite to be faster and reduce memory use by up to 20x. However, the most powerful 'big idea' is the introduction of an APL-style programming paradigm, which we call 'Hyperblocks'. This augments all existing reporter-block scalar inputs to accept N-dimensional lists of any shape as arguments as well, instead of being considered a domain error. These 'dimension-generic' blocks allow us to teach complex concepts without the need for loops or our beloved map block. For example, the domain of the multiply block had previously only been numbers, and if we had wanted to return a new list in which all of the elements were multiplied by 10, we would have had to use map(10*( ))over(data). Now we can simply say 10*data! In Snap! 6, Hyperblocks enable fast vectorized computations, making it much more efficient to do data analysis and media computation projects. There's nothing that beats a live demonstration of all these wonderful features, and we have two veteran power users to take it through its paces.},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Garcia, Dan and Ball, Michael},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {apl, beauty and joy of computing, build your own blocks, csforall, media computation, snap!},
	pages = {1379},
}

@inproceedings{lin_strategies_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {Strategies for {Authentic} {Assessments} of {Mastery} in {CS} {Courses}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3439504},
	doi = {10.1145/3408877.3439504},
	abstract = {Assessing student mastery is an increasingly important aspect of a computer science (CS) course. Recent discussions in the SIGCSE community have questioned traditional assessment and grading practices, such as the use of high-stakes exams and standardized programming assignments. As an alternative, authentic assessments of mastery have been proposed with the goal of creating more equitable and inclusive classrooms that support a diversity in student discourses and epistemologies. This Birds-of-a-Feather session will provide a forum for conversations around assessment of student mastery. Although conversations will likely draw on experiences from teaching remote courses, the discussions can also inspire assessment ideas and methods that work for in-person instruction as well. The discussion leaders will begin by sharing their experiences using formative, low-stakes quizzes; two-stage individual and group assessments; student-generated video problem solutions; written research papers; and creative projects. For each assessment, the discussion leaders expect to address questions such as: What were the goals? What classes was it used in? How did we grade it? How does it scale? This session is a space for participants to expand our collective understanding of how authentic assessments can be used in CS courses and share ideas to inform research and practice toward grading for equity. Afterward, discussion notes will be compiled and publicly archived at https://kevinl.info/authentic-assessments},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Lin, Kevin and Battestilli, Lina and Ball, Michael},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {alternative assessment, creative assignments, formative assessment, mastery},
	pages = {1361},
}

@inproceedings{ball_teaching_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {Teaching {TAs} to {Teach}: {Strategies} for {TA} {Training}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3432579},
	doi = {10.1145/3408877.3432579},
	abstract = {"The only thing that scales with undergrads is undergrads". As Computer Science course enrollments have grown, there has been a necessary increase in the number of undergraduate and graduate teaching assistants (TAs, and UTAs). TA duties often extend far beyond grading, including designing and leading lab or recitation sections, holding office hours and creating assignments. Though advanced students, TAs need proper pedagogical training to be the most effective in their roles. Training strategies have widely varied from no training at all, to semester-long prep courses. We will explore the challenges of TA training across both large and small departments. While much of the effort has focused on teams of undergraduates, most presenters have used the same tools and strategies with their graduate students. Training for TAs should not just include the mechanics of managing a classroom, but culturally relevant pedagogy. The panel will focus on the challenges of providing "just in time", and how we manage both intra-course training and department or campus led courses.},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and DeOrio, Andrew and Hsia, Justin and Blank, Adam},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {graduate student instructors, pedagogy, ta training, teaching assistants, undergraduate student instructors},
	pages = {461--462},
}

@inproceedings{ball_effective_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {Effective {Video} {Production} for {Online} and {In}-{Person} {Courses}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3432509},
	doi = {10.1145/3408877.3432509},
	abstract = {This workshop will be a tutorial on effective media production for computer science courses. We'll spend time breaking down the ways that you can use media in your courses, both live and pre-recorded. Good media production relies heavily on both well-planned curriculum and pre-production. As part of this, we'll focus on our work building courses around short 5-10 minute videos, which have been shown to encourage engagement from students. We'll discuss designing your content and process for efficient turn around, so that you can successfully build a course 'just in time'.The goal of the workshop is to share with participants the techniques we use in our own courses. We'll demo our workflows and favorite tools, with pointers on where to learn more. Along the way, we'll share how you can accomplish a well-produced video with minimal budgets, and where you can get the most out of adding hardware and software to your setup. This workshop will be highly interactive. For each topic, we'll start off with live demonstrations, but then spend time with hands-on questions from participants. Participants are encouraged to bring their questions and challenges to the workshop.},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and Garcia, Dan and Arvai, Eric},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {online learning, video production},
	pages = {1349},
}

@inproceedings{hill_teaching_2021,
	address = {New York, NY, USA},
	series = {{SIGCSE} '21},
	title = {Teaching with the {Beauty} and {Joy} of {Computing} – {AP} {CSP} and {More}!},
	copyright = {All rights reserved},
	isbn = {978-1-4503-8062-1},
	url = {https://doi.org/10.1145/3408877.3432507},
	doi = {10.1145/3408877.3432507},
	abstract = {The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course created at UC Berkeley to reach high school and university non-majors in computer science. It was chosen for the CSP pilot and endorsed by the College Board as an AP CSP curriculum and PD provider since the first AP CSP exam sitting in 2017. In this workshop, we will provide an overview of the BJC curriculum including course materials, teacher resources, and an introduction to Snap!, the chosen visual programming language of BJC. We will not only cover curriculum updates, Snap! updates, BJC for middle school, BJC in other languages, but also dive into labs with hands-on programming. Some of our experienced BJC Lead Teachers will provide support and answer questions based on personal classroom experience. This workshop is intended to be an introduction and update to the Beauty and Joy of Computing curriculum (bjc.edc.org) and community. This is not intended to be an in-depth experience, but an overview. Note: It is recommended to use least a Chromebook during the workshop in order to achieve the learning outcomes. Also, having Multiple/dual monitors will make for a better experience.},
	booktitle = {Proceedings of the 52nd {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Hill, Marnie and Garcia, Dan and Barnes, Tiffany and Mock, Lauren and Ball, Michael and Isvik, Amy and Bell, Dave},
	year = {2021},
	note = {event-place: Virtual Event, USA},
	keywords = {ap csp, computer, computer science, curriculum, high school, professional development, programming, training},
	pages = {1352},
}

@inproceedings{garcia_snap_2020,
	address = {New York, NY, USA},
	series = {{SIGCSE} '20},
	title = {Snap! {V5}, {Our} {Biggest}, {Feature}-{Filled} {Release} {Ever}!},
	copyright = {All rights reserved},
	isbn = {978-1-4503-6793-6},
	url = {https://doi.org/10.1145/3328778.3372549},
	doi = {10.1145/3328778.3372549},
	abstract = {In early June, we released Snap! version 5, with more new features than in any previous release. We now have a community website where users can share and publish projects so others can find and remix them, and where they can ask questions and discuss the beauty and joy of computing. We can now embed Snap! projects in other web pages. We've also enhanced the programming language, making it easier to discover and to use powerful blocks for analyzing data and transforming media. Did you know you can now use the video motion from the camera as an input device? How about painting by whistling? There's nothing that beats a live demonstration of all these wonderful features, and we have two veteran power users to take it through its paces.},
	booktitle = {Proceedings of the 51st {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Garcia, Dan and Ball, Michael},
	year = {2020},
	note = {event-place: Portland, OR, USA},
	keywords = {beauty-and-joy-of-computing, build-your-own-blocks, csforall, media-computation},
	pages = {1417},
}

@inproceedings{ball_beauty_2020,
	address = {New York, NY, USA},
	series = {{SIGCSE} '20},
	title = {The {Beauty} and {Joy} of {Computing} {Curriculum} and {Teacher} {Professional} {Development}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-6793-6},
	url = {https://doi.org/10.1145/3328778.3367029},
	doi = {10.1145/3328778.3367029},
	abstract = {The Beauty and Joy of Computing (BJC) is a CS Principles course developed at UC Berkeley for high school juniors through university non-majors. Together, UC Berkeley, the Education Development Center, and NC State have brought BJC to 700+ teachers nationwide. Since 2011, NC State has developed regional partnerships and a train-the-trainer model to offer nationwide PD to 600+ high school teachers. Our guiding philosophy is to meet students where they are, but not leave them there. BJC covers the big ideas and computational thinking practices in the AP CSP curriculum framework using Snap!, an easy-to-learn blocks-based programming language, and powerful computing ideas like recursion, higher-order functions, and computability. Through BJC, students create beautiful images, and realize that code itself can be beautiful. Having fun is an explicit course goal. BJC takes a "lab-centric" approach, and most learning occurs through guided programming labs where students explore and play. In this workshop, we will provide an overview of BJC, share experiences as instructors at university and high school levels, and share details of summer PD opportunities. Laptop needed.},
	booktitle = {Proceedings of the 51st {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and Mock, Lauren and Garcia, Dan and Barnes, Tiffany and Hill, Marnie and Milliken, Alexandra and Paley, Joshua and Lopez, Efrain and Bohrer, Jason},
	year = {2020},
	note = {event-place: Portland, OR, USA},
	keywords = {blocks-based-programming, broadening-participation, cs0, high-school, non-majors},
	pages = {1398},
}

@inproceedings{ball_teaching_2020,
	address = {New York, NY, USA},
	series = {{SIGCSE} '20},
	title = {Teaching {TAs} {To} {Teach}: {Strategies} for {TA} {Training}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-6793-6},
	url = {https://doi.org/10.1145/3328778.3366987},
	doi = {10.1145/3328778.3366987},
	abstract = {"The only thing that scales with undergrads is undergrads". As Computer Science course enrollments have grown, there has been a necessary increase in the number of undergraduate and graduate teaching assistants (TAs, and UTAs). TA duties often extend far beyond grading, including designing and leading lab or recitation sections, holding office hours and creating assignments. Though advanced students, TAs need proper pedagogical training to be the most effective in their roles. Training strategies have widely varied from no training at all, to semester-long prep courses. We will explore the challenges of TA training across both large and small departments. While much of the effort has focused on teams of undergraduates, most presenters have used the same tools and strategies with their graduate students. Training for TAs should not just include the mechanics of managing a classroom, but culturally relevant pedagogy. The panel will focus on the challenges of providing "just in time", and how we manage both intra-course training and department or campus led courses.},
	booktitle = {Proceedings of the 51st {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and Hsia, Justin and Pon-Barry, Heather and DeOrio, Andrew and Blank, Adam},
	year = {2020},
	note = {event-place: Portland, OR, USA},
	keywords = {graduate student instructors, pedagogy, ta training, teaching assistants, undergraduate student instructors},
	pages = {477--478},
}

@inproceedings{ball_snap_2019,
	address = {New York, NY, USA},
	series = {{SIGCSE} '19},
	title = {Snap! {A} {Look} at 5 {Years}, 250,000 {Users} and 2 {Million} {Projects}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-5890-3},
	url = {https://doi.org/10.1145/3287324.3293863},
	doi = {10.1145/3287324.3293863},
	abstract = {Snap! is blocks-based programming language that inherits a design and vocabulary from Scratch, but has been extended with support for user-defined functions, and robust built-in libraries. The Snap! Cloud software has been running for over 5 years and recently passed 250,000 users and 2 million projects of which nearly 600,000 are shared publicly. We have been to do an exploratory analysis the database of public projects to better understand how students are programming an using Snap!. This analysis is being conducted using a cleaned up XML-based representation of Snap! projects, which allows querying for data using SQL to extract information from project files. So far, we've seen that projects in Snap! computationally more complex than those found in Scratch, and make use of Snap!'s advanced features. Combined with growing use, we hope to give context to the ways which Snap! (and other) blocks-based languages are being used in classrooms. While there has been a discussion of code smells in Scratch, we haven't seen any discussions using Snap! and hope to show its additional functionality helps write clean code. Finally, we are interested in presenting a clear story of growing use for Snap! that is a compelling case to teachers (and subsequently their students) that blocks-based languages can be quite popular.},
	booktitle = {Proceedings of the 50th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and Mönig, Jens and Romagosa, Bernat and Harvey, Brian},
	year = {2019},
	note = {event-place: Minneapolis, MN, USA},
	keywords = {blocks-based programming, cloud software, program analysis, snap!, visual programming language},
	pages = {1279},
}

@inproceedings{milliken_ap_2018,
	address = {New York, NY, USA},
	series = {{SIGCSE} '18},
	title = {{AP} {CS} {Principles} and {The} {Beauty} and {Joy} of {Computing} {Curriculum}: ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-5103-4},
	url = {https://doi.org/10.1145/3159450.3162375},
	doi = {10.1145/3159450.3162375},
	abstract = {The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course developed at UC Berkeley, intended for high school juniors through university non-majors. It was twice chosen as a CSP pilot, and both the College Board and code.org have endorsed it. Since 2011, we have offered professional development to over 400 high school teachers. BJC covers the big ideas and computational thinking practices required in the AP CSP curriculum framework, using an easy-to-learn blocks-based programming language called Snap! (based on Scratch). During this workshop, we will provide an overview of the BJC curriculum, share our experiences as instructors of the course at the university and high school levels, and share details of potential summer professional development opportunities. Attendees should be prepared to program a BJC project in the Snap! environment. Please bring laptops with the Chrome browser installed.},
	booktitle = {Proceedings of the 49th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Milliken, Alexandra and Ball, Michael and Mock, Lauren},
	year = {2018},
	note = {event-place: Baltimore, Maryland, USA},
	keywords = {approved AP computer science principles curriculum, computer science principles, HS course, professional development},
	pages = {1059},
}

@inproceedings{ball_irt_2018,
	address = {New York, NY, USA},
	series = {{SIGCSE} '18},
	title = {{IRT} in 5 {Minutes}: {Easy} {Ways} to {Better} {Understand} an {Assessment} ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-5103-4},
	url = {https://doi.org/10.1145/3159450.3162211},
	doi = {10.1145/3159450.3162211},
	abstract = {This lightning talk will give a very quick introduction to "Item Response Theory", or IRT. IRT evolved from psychometrics as one method for evaluating the Quality of survey questions. In the classroom, IRT is a fantastic way to gain better insights into the quality and efficacy of the assessments we offer. IRT has been used by testing companies to evaluate exams like the GRE, SAT, and AP, but the same ideas can be applied to our classrooms. By applying some ideas from IRT we can start to look at exam scores with just a few simple charts, and we can begin to assess whether assigned questions are effective. We'll start by looking at correlations between individual question scores and overall assessment scores. While this is a simplification of IRT, we'll look at how we can use it to diagnose potential exam errors. The goal is to better understand the exams we give our students, and we can use this as a jumping off point to continue to evaluate our assessments.},
	booktitle = {Proceedings of the 49th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael},
	year = {2018},
	note = {event-place: Baltimore, Maryland, USA},
	keywords = {assessment, grading, grading analysis, irt, item response theory},
	pages = {1103},
}

@inproceedings{galanos_technology_2018,
	address = {New York, NY, USA},
	series = {{SIGCSE} '18},
	title = {Technology {We} {Can}'t {Live} {Without}!, {Revisited}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-5103-4},
	url = {https://doi.org/10.1145/3159450.3159629},
	doi = {10.1145/3159450.3159629},
	abstract = {The pace of technology for use in computing education is staggering. In recent years, the following technologies have completely transformed our teaching: Piazza, GradeScope, YouTube, Google Docs, Doodle and whenisgood.net, Skype and Google Hangout, and Khan Academy among others. Hardware has also played a part. We love our Zoom digital voice recorder (for recording CD-quality lecture audio), Blue Yeti USB mike (for audio/videoconferences), and iClickers (for engaging students in class). This panel is an outgrowth of a Technology that Educators of Computing Hail (TECH) Birds of a Feather session that we've held at SIGCSE for seven years, and the panel from SIGCSE 2015 [1] that served as a springboard for a regular column in ACM Inroads [2]. It will provide a chance for seasoned high school and university educators to show you the technologies that have "bubbled to the top" for them, and what key problems they solve. Like concert musicians, they will give live demonstrations and reveal the configuration options required to make their technology "sing". We hope this forum will allow the presenters to dive deeply into the common use cases of these technologies, highlight why they are invaluable, share any "gotchas" they've uncovered, and explain how others can adopt them at their institutions. The highlight of the panel is when the audience, inspired by the presentations, is invited to share their favorite "can't live without" technologies as well.},
	booktitle = {Proceedings of the 49th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Galanos, Ria and Ball, Michael and Dougherty, John and Hummel, Joe and Malan, David J.},
	year = {2018},
	note = {event-place: Baltimore, Maryland, USA},
	keywords = {computer science education, technology and teaching},
	pages = {1043--1044},
}

@inproceedings{ball_implementing_2017,
	address = {New York, NY, USA},
	series = {{SIGCSE} '17},
	title = {Implementing "{In}-{Lab}" {Autograding} for {Snap}! ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-4698-6},
	url = {https://doi.org/10.1145/3017680.3022443},
	doi = {10.1145/3017680.3022443},
	abstract = {While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language inspired by Scratch. We demonstrate how we integrated our autograder into UC Berkeley's CS10 and compare student success of autograded lab assessments to oral lab check offs. We demonstrate how we offered real-time feedback to a course of 300 students, and how we integrated our tools into an edX MOOC with 15,000 students. Our autograder is a hosted solution which would allow other courses to use our tools with little effort.},
	booktitle = {Proceedings of the 2017 {ACM} {SIGCSE} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael},
	year = {2017},
	note = {event-place: Seattle, Washington, USA},
	keywords = {assessment, autograding, automated feedback, blocks, labs, oral assessment, snap, visual programming languages},
	pages = {703},
}

@inproceedings{ball_writing_2017,
	address = {New York, NY, USA},
	series = {{SIGCSE} '17},
	title = {Writing {Autograders} for {Snap}! {And} {Integrating} {Them} {Into} {Your} {Course} ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-4698-6},
	url = {https://doi.org/10.1145/3017680.3022385},
	doi = {10.1145/3017680.3022385},
	abstract = {While text based languages have been (relatively) straightforward to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. The demo will present a system an autograder for Snap!, a visual programming language inspired by Scratch. Our autograder is a hosted solution which would allow other courses to use our tools with little effort. At the most basic level, the autograder contains a database of questions, test cases, and a method for presenting results to students. However, there are additional features for integration through LTI and advanced data analysis.The autograder allows real-time feedback for students, and for instructors to write tests in JavaScript, and eventually Snap! directly. We will show how instructors can write test cases and integrate the tool into their classrooms. We will also demo some data analysis capabilities of our system. This demo should be informative to those working with visual programming languages, including ones other than Snap!. We hope to provide a useful tool, and gain feedback for future iterations of the software.},
	booktitle = {Proceedings of the 2017 {ACM} {SIGCSE} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael},
	year = {2017},
	note = {event-place: Seattle, Washington, USA},
	keywords = {assessment, autograding, automated assessment, automated feedback, blocks programming, EDX, LTI, Snap!, visual programming languages},
	pages = {639},
}

@inproceedings{ball_autograding_2016,
	address = {New York, NY, USA},
	series = {{SIGCSE} '16},
	title = {Autograding and {Feedback} for {Snap}! {A} {Visual} {Programming} {Language} ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-3685-7},
	url = {https://doi.org/10.1145/2839509.2850572},
	doi = {10.1145/2839509.2850572},
	abstract = {While text based languages have been (relatively) easy to grade automatically, visual programming languages have been largely left out of the equation. However, as the demand for introductory CS courses has recently grown, so too has the interest in CS courses that use visual programming languages, and thus the need for a scalable solution to providing student feedback. In this poster we present a system design for an autograder for Snap!, a visual programming language designed at UC Berkeley, inspired by Scratch. Creativity and open-ended responses are an important part of many CS0 courses, such as the Beauty and Joy of Computing, our autograder includes tools that allow instructors to build robust feedback mechanisms that handle a wide variety of student submissions. We also present our initial work to integrate this system into edX for a series of MOOCs as well as a prototype of integrating this tool into a traditional LMS on campus.},
	booktitle = {Proceedings of the 47th {ACM} {Technical} {Symposium} on {Computing} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael A. and Garcia, Daniel D.},
	year = {2016},
	note = {event-place: Memphis, Tennessee, USA},
	keywords = {autograding, automated assessment, blocks programming, feedback, lti, snap!, visual programming},
	pages = {692},
}

@inproceedings{ball_using_2016,
	address = {New York, NY, USA},
	series = {{SIGCSE} '16},
	title = {Using {Instant} {Chat} for {Fun} and for {Profit} to {Run} a {Large} {Class} ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-3685-7},
	url = {https://doi.org/10.1145/2839509.2850526},
	doi = {10.1145/2839509.2850526},
	abstract = {This lightning talk describes the idea of "chat ops" applied to the classroom. Chat Ops is a (growing) industry practice which uses instant messaging (such as IRC, or Slack) to automate common development or monitoring tasks, such as maintaining and deploying a website. Instead of deploying a site, we use the process of ChatOps to help run large classes, and even individual class sections by automating tasks that are tedious or error prone. We've extended a bot framework, Hubot, with the tools that we need. We can automate releasing student scores, updating student's access to assignments, or handling in-class check offs with just a line of plain text. Chat messages also have the benefit that they are loggable and show everyone on the staff what's going on and why. We'd like to show why augmenting traditional email systems with chat messages can help improve communication and save time, but can also be an enjoyable way to build a community.},
	booktitle = {Proceedings of the 47th {ACM} {Technical} {Symposium} on {Computing} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael A.},
	year = {2016},
	note = {event-place: Memphis, Tennessee, USA},
	keywords = {automation, bot, chat, chatops, class management, hubot},
	pages = {495},
}

@inproceedings{garcia_ap_2016,
	address = {New York, NY, USA},
	series = {{SIGCSE} '16},
	title = {{AP} {CS} {Principles} and {The} {Beauty} and {Joy} of {Computing} {Curriculum} ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-3685-7},
	url = {https://doi.org/10.1145/2839509.2844714},
	doi = {10.1145/2839509.2844714},
	abstract = {The Beauty and Joy of Computing (BJC) is a CS Principles (CSP) course developed at UC Berkeley, intended for high school juniors through university non-majors. It was twice chosen as a CSP pilot, and both the College Board and code.org have endorsed it. Since 2011, we have offered professional development to over 240 high school teachers. Our guiding philosophy is to meet students where they are, but not to leave them there. It covers the big ideas and computational thinking practices required in the AP CSP curriculum framework using an easy-to-learn blocks-based programming language called Snap! (based on Scratch), and powerful computer science ideas like recursion, higher-order functions and computability. Through the course, students learn to create beautiful images, and realize that code itself can be beautiful. Having fun is an explicit course goal. We take a "lab-centric" approach, and much of the learning occurs through guided programming labs that ask students to explore and play. In this workshop, we will provide an overview of BJC, share our experiences as instructors of the course at the university and high school level, provide a glimpse into a typical week of the course, and share details of potential crowd-funded summer professional development opportunities. This is a hands-on workshop. Laptops are required, and all "handouts" will be digital.},
	booktitle = {Proceedings of the 47th {ACM} {Technical} {Symposium} on {Computing} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Garcia, Daniel D. and Barnes, Tiffany and Ball, Michael and Biga, Emil and Paley, Josh and Hill, Marnie and Mattix, Nathan and Safa, Parisa and Morris, Sean and Kenner, Shawn},
	year = {2016},
	note = {event-place: Memphis, Tennessee, USA},
	keywords = {beauty and joy of computing, bjc, broadening participation, computer science principles, cs principles, cs10k, professional development},
	pages = {718},
}

@inproceedings{ball_oh_2015,
	address = {New York, NY, USA},
	series = {{SIGCSE} '15},
	title = {Oh, {Snap}! {Enabling} and {Encouraging} {Success} in {CS1} ({Abstract} {Only})},
	copyright = {All rights reserved},
	isbn = {978-1-4503-2966-8},
	url = {https://doi.org/10.1145/2676723.2691947},
	doi = {10.1145/2676723.2691947},
	abstract = {CS10, is UC Berkeley's CS0 course. Each semester we have between 40\% and 50\% of our students continue on to CS61A, our CS1 course. Meanwhile an average of 25\% more students express interest in continuing learning computer science through other means. CS10 is taught in a visual language called Snap! and CS61A in Python. This poster explores some of the trends we have seen between CS10 and CS61A enrollment, and our new "Besides Blocks" curriculum which helps transition students from a visual to text based language. Besides Block is approximately one fourth of the CS10 curriculum which introduces Python in the context of the Turtle Graphics system, and a tool called Codification which is a way of translating Snap! blocks to Python.},
	booktitle = {Proceedings of the 46th {ACM} {Technical} {Symposium} on {Computer} {Science} {Education}},
	publisher = {Association for Computing Machinery},
	author = {Ball, Michael and Mock, Lauren and McKinsey, Jonathan and Machardy, Zachary and Garcia, Daniel and Titterton, Nathaniel and Harvey, Brian},
	year = {2015},
	note = {event-place: Kansas City, Missouri, USA},
	keywords = {cs0, cs1, curriculum, visual programming},
	pages = {691},
}

@inproceedings{garcia_ls_2014,
	address = {New York, NY, USA},
	series = {L@{S} '14},
	title = {L@{S} 2014 {Demo}: {Best} {Practices} for {MOOC} {Video}},
	copyright = {All rights reserved},
	isbn = {978-1-4503-2669-8},
	url = {https://doi.org/10.1145/2556325.2567889},
	doi = {10.1145/2556325.2567889},
	abstract = {UC Berkeley's CS10 course captures high-definition lectures featuring a unique overlay of the professor over slides. This paper is a brief overview of the demo we presented at L@S 2014. We'll also go into other forms of video we incorporate into the class. Finally, we'll present tips and tricks we've learned in both the pre-production and production stages of the video process.},
	booktitle = {Proceedings of the {First} {ACM} {Conference} on {Learning} @ {Scale} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Garcia, Daniel and Ball, Michael and Parikh, Aatash},
	year = {2014},
	note = {event-place: Atlanta, Georgia, USA},
	keywords = {cs1, mooc, production, study resource, video},
	pages = {217--218},
}
